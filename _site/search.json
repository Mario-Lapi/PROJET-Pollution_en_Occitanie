[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pollution en Occitanie",
    "section": "",
    "text": "Khadidiatou Kenewy DIALLO : khadidiatou-kenewy.diallo@etu.umontpellier.fr,\nMario LAPI : mario.lapi@etu.umontpellier.fr,\nJeanne MANNEQUIN : jeanne.mannequin@etu.umontpellier.fr,\nCamille MOTTIER : camille.mottier@etu.umontpellier.fr."
  },
  {
    "objectID": "index.html#auteurs",
    "href": "index.html#auteurs",
    "title": "Pollution en Occitanie",
    "section": "",
    "text": "Khadidiatou Kenewy DIALLO : khadidiatou-kenewy.diallo@etu.umontpellier.fr,\nMario LAPI : mario.lapi@etu.umontpellier.fr,\nJeanne MANNEQUIN : jeanne.mannequin@etu.umontpellier.fr,\nCamille MOTTIER : camille.mottier@etu.umontpellier.fr."
  },
  {
    "objectID": "Premiers tests/Test_graph.html",
    "href": "Premiers tests/Test_graph.html",
    "title": "Premiers essais de graphes",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\n\n#Extrait des données pour Mtp Près d'Arènes et NO2 - Données téléchargées\n\nMtp = pd.read_csv(\"Donnees_pour_test.csv\")\nMtp_PA_NO2 = Mtp.loc[(Mtp[\"nom_station\"]==\"Montpellier - Prés d Arènes Urbain\") & (Mtp[\"nom_poll\"]==\"NO2\"),[\"valeur\",\"date_debut\"]]\nDate = Mtp_PA_NO2[\"date_debut\"]\nReleve = Mtp_PA_NO2[\"valeur\"]\n\n\n# Création du DatFrame\n\ndata = {\n    'Date': Date,\n    'Valeur1': Releve\n}\ndf = pd.DataFrame(data)\ndf = df.sort_values(by=['Date'], ascending=[True])\ndf['Date'] = pd.to_datetime(df['Date'], format='%Y/%m/%d %H:%M:%S%z')\n\n# Création du graphique avec les dates en abscisse et les valeurs en ordonnée\n\nplt.figure(figsize=(20, 6))\nplt.plot(df['Date'], df['Valeur1'], label='Valeur1',ls='-')\n\n# Spécifiez les emplacements des ticks (ici, tous les jours)\nplt.gca().xaxis.set_major_locator(mdates.DayLocator())\n\n# Faites pivoter les labels des dates pour une meilleure lisibilité\nplt.xticks(rotation=45)\n\n# Ajouter des étiquettes aux axes et un titre\nplt.xlabel('Dates')\nplt.ylabel('Relevé (en $\\mu g/m^3$)')\nplt.title('Concentration en $NO_2$ - Montpellier Près d\\'Arènes')\n\n# Afficher le graphique\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Premiers tests/Test_graph.html#un-mois-un-polluant-une-station---via-plt",
    "href": "Premiers tests/Test_graph.html#un-mois-un-polluant-une-station---via-plt",
    "title": "Premiers essais de graphes",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\n\n#Extrait des données pour Mtp Près d'Arènes et NO2 - Données téléchargées\n\nMtp = pd.read_csv(\"Donnees_pour_test.csv\")\nMtp_PA_NO2 = Mtp.loc[(Mtp[\"nom_station\"]==\"Montpellier - Prés d Arènes Urbain\") & (Mtp[\"nom_poll\"]==\"NO2\"),[\"valeur\",\"date_debut\"]]\nDate = Mtp_PA_NO2[\"date_debut\"]\nReleve = Mtp_PA_NO2[\"valeur\"]\n\n\n# Création du DatFrame\n\ndata = {\n    'Date': Date,\n    'Valeur1': Releve\n}\ndf = pd.DataFrame(data)\ndf = df.sort_values(by=['Date'], ascending=[True])\ndf['Date'] = pd.to_datetime(df['Date'], format='%Y/%m/%d %H:%M:%S%z')\n\n# Création du graphique avec les dates en abscisse et les valeurs en ordonnée\n\nplt.figure(figsize=(20, 6))\nplt.plot(df['Date'], df['Valeur1'], label='Valeur1',ls='-')\n\n# Spécifiez les emplacements des ticks (ici, tous les jours)\nplt.gca().xaxis.set_major_locator(mdates.DayLocator())\n\n# Faites pivoter les labels des dates pour une meilleure lisibilité\nplt.xticks(rotation=45)\n\n# Ajouter des étiquettes aux axes et un titre\nplt.xlabel('Dates')\nplt.ylabel('Relevé (en $\\mu g/m^3$)')\nplt.title('Concentration en $NO_2$ - Montpellier Près d\\'Arènes')\n\n# Afficher le graphique\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Premiers tests/Test_graph.html#un-mois-une-station-tous-les-polluants---via-plotly",
    "href": "Premiers tests/Test_graph.html#un-mois-une-station-tous-les-polluants---via-plotly",
    "title": "Premiers essais de graphes",
    "section": "Un mois, une station, tous les polluants - via plotly",
    "text": "Un mois, une station, tous les polluants - via plotly\n\n\nCode\nimport pandas as pd\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n#Exemple avec données pour Mtp Près d'Arènes et NO2 - Données téléchargées\n\nMtp = pd.read_csv(\"Donnees_pour_test.csv\")\n\n# Extraction renvoie un dataframe composé des dates et des valeurs relevées pour la station choisie, pour tous les polluants\n\ndef extraction(donnees,station) :\n    df = donnees.loc[(donnees[\"nom_station\"] == station),[\"nom_poll\",\"valeur\",\"date_debut\"]]\n    df[\"date_debut\"] = pd.to_datetime(df[\"date_debut\"], format = '%Y/%m/%d %H:%M:%S%z')\n    df = df.rename(columns={'date_debut': 'Date'})\n    return df\n\n# test\n# print(extraction(Mtp,\"Montpellier - Prés d Arènes Urbain\"))\n\n# table renvoie un dataframe composé des colonnes : dates et tous les différents polluants en parallèle\n\ndef table(donnees,station) :\n    data = extraction(donnees,station)\n    Poll = data[\"nom_poll\"].unique()\n    df = data.loc[data[\"nom_poll\"] == Poll[0],[\"valeur\", \"Date\"]]\n    df = df.rename(columns={'valeur': Poll[0]})\n    for i in range(1,len(Poll)) :\n        p = Poll[i]\n        d = data.loc[data[\"nom_poll\"] == p,[\"valeur\", \"Date\"]]\n        d = d.rename(columns={'valeur': p})\n        df = pd.merge(df, d, on = \"Date\")\n    df = df.sort_values(by=['Date'], ascending=[True])\n    return df.set_index([\"Date\"])\n\n# test\n# print(table(Mtp,\"Montpellier - Prés d Arènes Urbain\"))\n\n# Trace sur un même graphique les courbes des rélevés pour les polluants (à cocher)\n\n\n\ndef Trace_px(donnees,station) :\n    df = table(donnees,station)\n    fig = px.line(df, width=1000, height=500,\n     title = \"Concentration - \" + station,\n     labels=dict(value='Concentration (µg/m³)', variable='Polluant'))\n    fig.show()\n\n\n# test\nTrace_px(Mtp,\"Montpellier - Prés d Arènes Urbain\")"
  }
]