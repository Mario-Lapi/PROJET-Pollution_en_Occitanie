---
title: "Pollution en Occitanie"
author: "Khadidiatou Kenewy DIALLO, Mario LAPI, Jeanne MANNEQUIN, Camille MOTTIER"
format: 
    revealjs:
        theme: sky
---

## Introduction

- **Le problème initial :**

Construction d'un site de visualisation des données récentes de pollution en Occitanie.

Données issues de : [Atmo Occitanie](https://data-atmo-occitanie.opendata.arcgis.com/pages/liste-des-flux)

&nbsp;

- **Les outils :**

  - Python
  - Quarto


## Les grands axes de réflexion

&nbsp;


Problématique : Comment rendre visible ...


- les dissimilarités géographiques --> Jeanne
- les dissimilarités temporelles --> Mario et Camille
- le lien avec la météo --> Kenewy


## Visualisation géographique 

Création d'une carte pour comparer les principales villes d'Occitanie

Le code : 

```{.python code-line-numbers="1-4,6-14,16,26,60-71"}
import folium
import pandas as pd
import math
import csv

# Créer une carte focus sur la région
m = folium.Map(location=[43.6000,1.4400], zoom_start=8,tiles='CartoDB Positron', attr='CartoDB Positron')

# Découper la carte en départements 
geojson_url = 'https://france-geojson.gregoiredavid.fr/repo/regions/occitanie/departements-occitanie.geojson'
folium.GeoJson(geojson_url, name='occitanie').add_to(m)

# Nom du fichier CSV
nom_fichier_csv = 'Mesure_annuelle_Region_Occitanie_Polluants_Principaux.csv'

# Ouvrir le fichier CSV en mode lecture
with open(nom_fichier_csv, newline='') as fichier_csv:
    lecteur_csv = csv.reader(fichier_csv)
    l=[]
    data2=[]
    # Lire les lignes du fichier CSV
    for ligne in lecteur_csv:
        if ligne[3] not in l:
            l.append(ligne[3])
        data2.append(ligne)
# Regrouper les données de façon à les utiliser (une station par ville qui est la moyenne des autres stations sur la même ville)
data=[]
liste=[]
p=0
for ville in l[1:]:
    s=0
    n=0
    for ligne in data2:
        if ligne[3] == ville:
            s+=float(ligne[11])
            n+=1
            if ligne[3] not in liste:
                data.append(ligne)
            liste.append(ville)
    s=s/n
    data[p][11]=s
    p+=1
# Créer un data utilisable par folium
lat=[]
lon=[]
name=[]
value=[]     
for ligne in data:
    lat.append(float(ligne[1]))
    lon.append(float(ligne[0]))
    name.append(ligne[3])
    value.append(float(ligne[11]))
data3 = pd.DataFrame({
   'lat':lat,
   'lon':lon,
   'name':name,
   'value':value
})

#Création de cercles proportionnels à la mesure de pm10 présent par ville
for city in data3.itertuples():
    local_deformation = math.cos(city.lat * math.pi / 180)
    folium.Circle(
        location=[city.lat, city.lon],
        popup=folium.Popup(f"{city.value} µm/m³"),
        tooltip=folium.Tooltip(city.name),
        radius=city.value * 800.0 * local_deformation, #le facteur 800 est choisit arbitrairement
        color='purple',
        fill=True,
        fill_color='purple'
    ).add_to(m)

# Montrer la carte
m
```



## Évolution temporelle : la nécessaire création de modules

Le fichier _quarto.yml

```
project:
  type: website
  render:
    - index.qmd
    - PollutionEnOccitanie/Par_villes/Saint_Girons.qmd
    - PollutionEnOccitanie/Par_villes/Rodez.qmd
    - PollutionEnOccitanie/Par_villes/Nimes.qmd
    - PollutionEnOccitanie/Par_villes/Toulouse.qmd
    - PollutionEnOccitanie/Par_villes/Auch.qmd
    - PollutionEnOccitanie/Par_villes/Montpellier.qmd
    - PollutionEnOccitanie/Par_villes/Tarbes.qmd
    - PollutionEnOccitanie/Par_villes/Perpignan.qmd
    - PollutionEnOccitanie/Par_villes/Albi.qmd
    - PollutionEnOccitanie/Par_villes/Montauban.qmd
    - PollutionEnOccitanie/Comparaison_geo/Geographique.qmd
```

## Évolution temporelle : la nécessaire création de modules

Comment adapter le code aux différentes villes ?


```{.python}
from Month import *
from Horloge import * 
from Month_resume import *
from Tracegraph import *

data = pd.read_csv("Mesure_horaire_(30j)_Region_Occitanie_Polluants_Reglementaires.csv")

station = 'Montpellier - Prés d Arènes Urbain'

Trace_go(data,station,'Montpellier')

trace_resume(data, station)

Horloge_semaine(data, station)

Horloge_weekend(data,station)


url = "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_mensuelle_poll_princ/FeatureServer/0/query?f=json&where=(nom_com%20IN%20('MONTPELLIER'))&outFields=*"
selected_attributes = ['nom_com', 'nom_poll', 'valeur', 'date_debut']
cityname = 'MONTPELLIER'

tracegraph(url, selected_attributes,cityname)




```

## Évolution temporelle : les tracés

Modules prédéfinis utilisés : pandas, plotly

Modules créés : Month, Month_resume, Horloge, Tracegraph

```{.python code-line-numbers="1,2,11,19,34,38,39,40,51,52,53,54,55"}
import pandas as pd
import plotly.graph_objects as go

"""
Module comportant les fonctions d'extraction de données pour la ville choisie
et les fonctions d'étude des données horaires sur 30 jours
"""

# extraction extrait des données les dates et les valeurs relevées pour la station choisie, pour tous les polluants

def extraction(donnees,station) :
    df = donnees.loc[(donnees["nom_station"] == station),["nom_poll","valeur","date_debut"]]
    df["date_debut"] = pd.to_datetime(df["date_debut"], format = '%Y/%m/%d %H:%M:%S%z')
    df = df.rename(columns={'date_debut': 'Date'})
    return df

# table renvoie un dataframe avec en colonnes les dates et tous les différents polluants

def table(donnees,station) :
    data = extraction(donnees,station)
    Poll = data["nom_poll"].unique()
    df = data.loc[data["nom_poll"] == Poll[0],["valeur", "Date"]]
    df = df.rename(columns={'valeur': Poll[0]})
    for i in range(1,len(Poll)) :
        p = Poll[i]
        d = data.loc[data["nom_poll"] == p,["valeur", "Date"]]
        d = d.rename(columns={'valeur': p})
        df = pd.merge(df, d, on = "Date")
    df = df.sort_values(by=['Date'], ascending=[True])
    return df.set_index(["Date"])

# Trace_go affiche les concentrations des différents polluants (à cocher) avec un curseur pour la barre de temps

def Trace_go(donnees,station,ville) :
    data = table(donnees,station)
    fig = go.Figure()
    for i in data.columns :
        fig.add_trace(
            go.Scatter(x=list(data.index), y=list(data[i]), name=i)
        )
    fig.update_layout(
        title_text = "Concentration des polluants à " + ville,
        # labels = dict(y='Concentration (µg/m³)', variable='Polluant')
    ) 
    fig.update_layout(
        yaxis=dict(
            title='Concentration (µg/m³)'
        )
    )
    fig.update_layout(
        xaxis=dict(
            rangeslider=dict(
                visible=True
            ),
            type="date"
        ),
        width=1000,
        height=550
    )
    fig.show()
```

## Import des données

D'un csv en local à une requête en ligne...

```{.python}
import requests
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go

def tracegraph(url, selected_attributes, city_name):
    # Fonction pour récupérer les données de pollution
    def get_pollution_data(url, selected_attributes, city_name):
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            features = data.get('features', [])
            
            if not features:
                print(f"Aucune donnée trouvée pour {city_name}")
                return None
            
            city_data = []
            for feature in features:
                if 'attributes' in feature:
                    properties = feature['attributes']
                    if properties.get('nom_com') == city_name:
                        entry = {key: properties.get(key, None) for key in selected_attributes}
                        if entry.get('valeur') is not None:
                            entry['date_debut'] = pd.to_datetime(entry['date_debut'], unit='ms')
                            city_data.append(entry)
            
            if not city_data:
                print(f"Aucune donnée trouvée pour {city_name}")
                return None
            
            df = pd.DataFrame(city_data, columns=selected_attributes)
            return df
        else:
            print(f"Erreur de requête avec le code {response.status_code}")
            return None
    
    # Appel de la fonction pour récupérer les données
    city_data_frame = get_pollution_data(url, selected_attributes, city_name)

    if city_data_frame is None:
        return  # Sortir si aucune donnée n'est récupérée

    # Convertir la colonne 'valeur' en un type numérique
    city_data_frame['valeur'] = pd.to_numeric(city_data_frame['valeur'], errors='coerce')

    # Grouper par mois et par polluant, calculer la moyenne
    average_data = city_data_frame.groupby(['nom_poll', city_data_frame['date_debut'].dt.to_period("M")])['valeur'].mean().reset_index()

    # Créer une figure interactive Plotly
    fig = go.Figure()

    # Tracer des courbes pour chaque polluant
    for pollutant in average_data['nom_poll'].unique():
        data = average_data[average_data['nom_poll'] == pollutant]
        fig.add_trace(go.Scatter(x=data['date_debut'].dt.to_timestamp(), y=data['valeur'], mode='lines+markers', name=pollutant))

    # Configurer la mise en page interactive
    fig.update_layout(title=f'Moyenne de concentration des polluants à {city_name} par mois ',
                      xaxis_title='Date',
                      yaxis_title='Moyenne de Concentration en μg/m3',
                      xaxis=dict(type='date'),
                      xaxis_rangeslider_visible=True)

    # Afficher la figure interactive
    fig.show()
```

[Le site](https://cmottier.github.io/PROJET-Pollution_en_Occitanie/)


## La mise en relation avec les données météorologiques

```{.python}
import pandas as pd

df_temperature = pd.read_csv('donnees-synop-essentielles-omm (2).csv')
print(df_temperature.head())

df_polluants = pd.read_csv('Mesure_annuelle_Region_Occitanie_Polluants_Principaux (1) (1).csv')
print(df_polluants.head())

import matplotlib.pyplot as plt

# Filter the temperature data for Montpellier
montpellier_temp = df_temperature[df_temperature['Nom'] == 'MONTPELLIER']

# Filter the pollutant data for Montpellier and for the pollutant 'O3' which stands for Ozone
montpellier_ozone = df_polluants[(df_polluants['nom_com'] == 'MONTPELLIER') & (df_polluants['nom_poll'] == 'O3')]

# Convert date columns to datetime
montpellier_temp['Date'] = pd.to_datetime(montpellier_temp['Date'], format='%Y%m%d%H%M%S')
montpellier_ozone['date_debut'] = pd.to_datetime(montpellier_ozone['date_debut'])

# Group the data by date and calculate mean temperature and ozone levels
montpellier_temp_grouped = montpellier_temp.groupby(montpellier_temp['Date'].dt.date).agg({'Température':'mean'})
montpellier_ozone_grouped = montpellier_ozone.groupby(montpellier_ozone['date_debut'].dt.date).agg({'valeur':'mean'})

# Merge the two datasets on the date
montpellier_merged = pd.merge(montpellier_temp_grouped, montpellier_ozone_grouped, left_index=True, right_index=True, how='inner')

# Plotting
plt.figure(figsize=(14,7))
plt.title('Daily Mean Temperature and Ozone Levels in Montpellier')
plt.plot(montpellier_merged.index, montpellier_merged['Température'], label='Mean Temperature (°C)', color='blue')
plt.plot(montpellier_merged.index, montpellier_merged['valeur'], label='Ozone Level', color='red')

plt.xlabel('Date')
plt.ylabel('Values')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()



```

## Le déploiement


&nbsp;


- Utilisation d'une action github

- Emploi du workflow Quarto Publish, afin d'automatiser le déploiement à chaque nouvelle contribution.




## Pour conclure ...


- **Les découvertes du projet**

    - Python, github, quarto
    - Manipulation de données nombreuses
    - Travail de groupe : organisation

&nbsp;

- **Améliorations**

  - Import automatisé
  - Étude des temps de calculs
    ...

##

:::{style="font-size: 1.8em; text-align: center"}

POLLUTION EN OCCITANIE
:::